---
description: Always use TypeScript types and avoid using any or unknown unless necessary
globs: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx']
alwaysApply: true
---

# TypeScript Type Safety Rules

## Type Safety Rules

### Never use `any` type

- Always use proper TypeScript types
- Use `unknown` **only** when the type is genuinely unknown at compile time
- **Never use `unknown` as a way to bypass type safety** - always use proper type narrowing
- Use union types when multiple types are possible
- Use generics when types need to be parameterized
- Use type assertions sparingly and only when absolutely necessary

### Never use forceful casting

- Avoid using `as` type assertions unless absolutely necessary
- **Never cast from `unknown` without proper type checking first**
- Use type guards instead of casting
- Use proper type narrowing techniques
- If casting is unavoidable, add detailed comments explaining why

### Preferred approaches:

- Use `unknown` **only** when you truly don't know the type (e.g., JSON.parse, external APIs)
- **Always narrow `unknown` types using type guards** before using them
- Use type guards: `if (typeof x === 'string')`
- Use `in` operator: `if ('property' in obj)`
- Use `instanceof` checks: `if (obj instanceof SomeClass)`
- Use discriminated unions with literal types
- Use proper generic constraints

### Examples of what NOT to do:

```typescript
// ❌ Don't use any
function badFunction(param: any): any {}

// ❌ Don't forcefully cast
const result = data as SomeType;

// ❌ Don't use unknown as a type escape hatch
function badUnknownUsage(data: unknown): SomeType {
  return data as SomeType; // This defeats the purpose of unknown!
}

// ❌ Don't use unknown when you know the type
function badParameterType(param: unknown): string {
  // If you know it should be a string, type it as string!
  return param as string;
}
```

### Examples of what TO do:

```typescript
// ✅ Use unknown with proper type narrowing
function goodFunction(param: unknown): string {
  if (typeof param === 'string') {
    return param;
  }
  throw new Error('Expected string');
}

// ✅ Use proper generics when types are known
function genericFunction<T>(param: T): T {
  return param;
}

// ✅ Use unknown for truly unknown data (like JSON parsing)
function parseApiResponse(jsonString: string): User | null {
  const data: unknown = JSON.parse(jsonString);

  // Proper type checking before using
  if (
    typeof data === 'object' &&
    data !== null &&
    'id' in data &&
    'name' in data &&
    typeof data.id === 'number' &&
    typeof data.name === 'string'
  ) {
    return { id: data.id, name: data.name };
  }

  return null;
}
```
