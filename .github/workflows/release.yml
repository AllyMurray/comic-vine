name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version_created: ${{ steps.check_version.outputs.new_version_created }}
      version_tag: ${{ steps.check_version.outputs.version_tag }}
    env:
      CI: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Get current version before release
        id: before_version
        run: echo "version=$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')" >> $GITHUB_OUTPUT
      - name: release
        run: npm run release
      - name: Check if new version was created
        id: check_version
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')
          PREVIOUS_TAG="${{ steps.before_version.outputs.version }}"
          if [ "$CURRENT_TAG" != "$PREVIOUS_TAG" ]; then
            echo "new_version_created=true" >> $GITHUB_OUTPUT
            echo "version_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
            echo "✅ New version created: $CURRENT_TAG"
          else
            echo "new_version_created=false" >> $GITHUB_OUTPUT
            echo "❌ No new version created"
          fi
      - name: Backup artifact permissions
        if: ${{ steps.check_version.outputs.new_version_created == 'true' }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: ${{ steps.check_version.outputs.new_version_created == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.new_version_created == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the version tag from the release job
          TAG="${{ needs.release.outputs.version_tag }}"
          echo "Creating GitHub release for $TAG"
          gh release create $TAG --generate-notes || echo "Release may already exist"
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.new_version_created == 'true'
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx -p publib@latest publib-npm
